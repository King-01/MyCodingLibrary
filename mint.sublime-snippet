<snippet>
	<content><![CDATA[
const int MOD=hell;
struct Mint {
    int _val;
 
    Mint(long long _v = 0) {
        if (_v < 0)
            _v = _v % MOD + MOD;
        if (_v >= MOD)
            _v %= MOD;
        _val = _v;
    }
 
    static int mod_inv(int _a, int _m = MOD) {
        int _g = _m, _r = _a, _x = 0, _y = 1;
        while (_r != 0) {
            int q = _g / _r;
            _g %= _r; swap(_g, _r);
            _x -= q * _y; swap(_x, _y);
        } 
        return _x < 0 ? _x + _m : _x;
    } 
    explicit operator int() const {
        return _val;
    }
    Mint& operator+=(const Mint &other) {
        _val += other._val;
        if (_val >= MOD) _val -= MOD;
        return *this;
    }
    Mint& operator-=(const Mint &other) {
        _val -= other._val;
        if (_val < 0) _val += MOD;
        return *this;
    }
    static unsigned fast_mod(uint64_t _x, unsigned _m = MOD) {
           #if !defined(_WIN32) || defined(_WIN64)
                return _x % _m;
           #endif
           unsigned x_high = _x >> 32, x_low = (unsigned) _x;
           unsigned quot, rem;
           asm("divl %4\n"
            : "=_a" (quot), "=d" (rem)
            : "d" (x_high), "_a" (x_low), "_r" (_m));
           return rem;
    }
    Mint& operator*=(const Mint &other) {
        _val = fast_mod((uint64_t) _val * other._val);
        return *this;
    }
    Mint& operator/=(const Mint &other) {
        return *this *= other.inv();
    }
    friend Mint operator+(const Mint &_a, const Mint &b) { return Mint(_a) += b; }
    friend Mint operator-(const Mint &_a, const Mint &b) { return Mint(_a) -= b; }
    friend Mint operator*(const Mint &_a, const Mint &b) { return Mint(_a) *= b; }
    friend Mint operator/(const Mint &_a, const Mint &b) { return Mint(_a) /= b; }
    Mint& operator++() {
        _val = _val == MOD - 1 ? 0 : _val + 1;
        return *this;
    }
    Mint& operator--() {
        _val = _val == 0 ? MOD - 1 : _val - 1;
        return *this;
    }
    Mint operator++(int32_t) { Mint before = *this; ++*this; return before; }
    Mint operator--(int32_t) { Mint before = *this; --*this; return before; }
    Mint operator-() const {
        return _val == 0 ? 0 : MOD - _val;
    }
    bool operator==(const Mint &other) const { return _val == other._val; }
    bool operator!=(const Mint &other) const { return _val != other._val; }
    Mint inv() const {
        return mod_inv(_val);
    }
    Mint power(long long _p) const {
        assert(_p >= 0);
        Mint _a = *this, result = 1;
        while (_p > 0) {
            if (_p & 1)
                result *= _a;
 
            _a *= _a;
            _p >>= 1;
        }
        return result;
    }
    friend ostream& operator << (ostream &stream, const Mint &_m) {
        return stream << _m._val;
    }
    friend istream& operator >> (istream &stream, Mint &_m) {
        return stream>>_m._val;   
    }
};
]]></content>
	<!-- Optional: Set _a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>mint</tabTrigger>
	<!-- Optional: Set _a scope to limit where the snippet will trigger -->
	<!-- <scope>source.python</scope> -->
</snippet>
