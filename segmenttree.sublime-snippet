<snippet>
	<content><![CDATA[
struct data
{
	int sum = 0;
	data()
	{
		;
	}
};
data segt[N << 2];
//koi bhi naya DS daale array ki jgh build function me toh use globally define krke hi dalein warna TLE aajayega.
//building of segment tree takes O(n) time and each query takes O(log n) time.
//pass on the parameters in this make function.
data make(int v1)
{
	data ret;
	ret.sum = v1;
	return ret;
}
data combine(data f1, data f2)
{
	//logic regarding combining 2 child nodes for a parent one.
	data ret;
	ret.sum = f1.sum + f2.sum;
	return ret;
}
void build(int a1[], int node, int tl ,int tr)
{
	if(tl == tr)
	{
		segt[node] = make(a1[tl]);
	}
	else
	{
		int tm = (tl + tr) >> 1;
		build(a1, node << 1, tl, tm);
		build(a1, node << 1 | 1 ,tm + 1 ,tr);
		segt[node] = combine(segt[node << 1], segt[node << 1 | 1]);
	}
}
data query(int node, int tl, int tr ,int l, int r)
{
	if(l > r)
	{
		return make(0);
	}
	if(l == tl and r == tr)
	{
		return segt[node];
	}
	int tm = (tl + tr) >> 1;
	return combine(query(node << 1, tl, tm, l, min(r ,tm)), query(node << 1 | 1 ,tm + 1, tr ,max(l, tm + 1), r));
}
void update(int node, int tl ,int tr ,int pos ,int new_val)
{
	if(tl == tr)
	{
		segt[node] = make(new_val);
	}
	else
	{
		int tm = (tl + tr) >> 1;
		if(pos <= tm)
		{
			update(node << 1, tl ,tm ,pos, new_val);
		}
		else 
		{
			update(node << 1 | 1, tm + 1 ,tr, pos ,new_val);
		}
		segt[node] = combine(segt[node << 1], segt[node << 1 | 1]);
	}
}
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>segmenttree</tabTrigger>
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<!-- <scope>source.python</scope> -->
</snippet>
