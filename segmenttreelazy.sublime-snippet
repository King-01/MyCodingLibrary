<snippet>
	<content><![CDATA[
struct item{
	int pref, suff, ans, sum;
	item(){
		pref = suff = ans = sum = 0;
	}
	item(int val)
	{
		pref = max(0LL, val);
		suff = pref;
		ans = pref;
		sum = val;
	}
	item(int val, int len)
	{
		pref = max(0LL, len * val);
		suff = pref;
		ans = pref;
		sum = val * len;
	}
	item operator+(const item &op1)
	{
		item ret;
		ret.pref = max({0LL, pref, op1.pref + sum});
		ret.suff = max({0LL, op1.suff, op1.sum + suff});
		ret.sum = op1.sum + sum;
		ret.ans = max({0LL, op1.ans, ans, op1.pref + suff});
		return ret;
	}
};
struct segtree{
	vector<item> sst;
	item NEUTRAL_ELEMENT;
	int NO_OPERATION;
	vi lazy;
	int sz;
	int le(int x){return 2 * x + 1;}
	int ri(int x){return 2 * x + 2;}
	void init(int gg)
	{
		NO_OPERATION = -inf;
		NEUTRAL_ELEMENT = item();
		sz = 1;
		while(sz < gg)sz <<= 1;
		sst.assign(2 * sz, 0);
		lazy.assign(2 * sz, NO_OPERATION);
		return ;
	}
	void build(vector<int> &v, int x, int lx, int rx)
	{
		if(rx - lx == 1)
		{
			if(lx < sz(v))
			{
				sst[x] = item(v[lx]);
			}
			return ;
		}
		int mx = (lx + rx) >> 1;
		build(v, le(x), lx, mx);
		build(v, ri(x), mx, rx);
		sst[x] = sst[le(x)] + sst[ri(x)];
		return ;
	}
	void build(vector<int> &v)
	{
		int gg = sz(v);
		init(gg);
		build(v, 0, 0, sz);
	}
	void propagate(int x, int lx, int rx)
	{
		if(lazy[x] == NO_OPERATION or rx - lx == 1)return ;
		int mx = (lx + rx) >> 1;
		lazy[le(x)] = lazy[ri(x)] = lazy[x];
		sst[le(x)] = item(lazy[x], mx - lx);
		sst[ri(x)] = item(lazy[x], rx - mx);
		lazy[x] = NO_OPERATION;
		return ;
	}
	void upd(int l, int r, int val, int x, int lx, int rx)
	{
		propagate(x, lx, rx);
		if(lx >= r or l >= rx)return ;
		if(lx >= l and r >= rx)
		{
			lazy[x] = val;
			sst[x] = item(val, rx - lx);
			return ;
		}
		int mx = (lx + rx) >> 1;
		upd(l, r, val, le(x), lx, mx);
		upd(l, r, val, ri(x), mx, rx);
		sst[x] = sst[le(x)] + sst[ri(x)];
		return ;
	}
	void upd(int l, int r, int val)
	{
		return upd(l, r, val, 0, 0, sz);
	}
	item query(int l, int r, int x, int lx, int rx)
	{
		propagate(x, lx, rx);
		if(rx <= l or r <= lx)return NEUTRAL_ELEMENT;
		if(lx >= l and r >= rx)return sst[x];
		int mx = (rx + lx) >> 1;
		item f1 = query(l ,r, le(x), lx, mx);
		item f2 = query(l, r, ri(x), mx, rx);
		return f1 + f2;
	}
	item query(int l, int r)
	{
		return query(l, r, 0, 0, sz);
	}
};

]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>Segmenttreelazy</tabTrigger>
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<!-- <scope>source.python</scope> -->
</snippet>
